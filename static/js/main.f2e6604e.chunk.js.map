{"version":3,"sources":["arrow.png","currency.jpg","actions/enum.tsx","actions/getExchangeRate.ts","reducers/interfaces.tsx","App.tsx","actions/setBYN.tsx","actions/setUSD.tsx","reducers/currency.tsx","reducers/rate.ts","reducers/index.tsx","store/index.tsx","index.tsx"],"names":["module","exports","actionCurrency","actionTypeRate","getExchangeRate","dispatch","type","LOADING","fetch","then","data","json","USD_in","USD_out","time","Date","getTime","SUCCESS","catch","error","ERROR","Currency","Placeholder","Field","GlobalStyle","createGlobalStyle","Arrow","styled","button","Button","div","Input","input","Img","img","Title","h3","WrapperUP","WrapperDown","Warning","connect","state","rate","loading","mainCurrency","currency","exchangeRate","setMainBYN","BYN","setMainUSD","USD","useState","sellInput","setSellInput","buyInput","setBuyInput","useEffect","getNewExchangeRate","parseFloat","handleChange","event","result","target","value","name","length","test","SELL","Math","round","toString","BUY","src","placeholder","onChange","disabled","onClick","arrow","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.f2e6604e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.d20ee171.png\";","module.exports = __webpack_public_path__ + \"static/media/currency.4d066587.jpg\";","// @ts-ignore\r\nexport enum actionCurrency {\r\n  BYN = 'SET_BYN',\r\n  USD = 'SET_USD',\r\n}\r\n\r\nexport enum actionTypeRate {\r\n  LOADING = 'GET_RATE_LOADING',\r\n  SUCCESS = 'LOAD_RATE_SUCCESS',\r\n  ERROR = 'LOAD_RATE_ERROR',\r\n}\r\n","import { ThunkDispatch } from 'redux-thunk'\r\nimport { actionTypeRate } from './enum'\r\n\r\nconst LINK_HEROKU_PROXY = 'https://cors-anywhere.herokuapp.com/'\r\nconst LINK_BANK = 'https://belarusbank.by/api/kursExchange'\r\n\r\nconst getExchangeRate = () => (dispatch: ThunkDispatch<{}, {}, any>) => {\r\n  dispatch({ type: actionTypeRate.LOADING })\r\n  fetch(`${LINK_HEROKU_PROXY}${LINK_BANK}`)\r\n    .then(data => data.json())\r\n    .then(data => data[0])\r\n    .then(data => {\r\n      const { USD_in, USD_out } = data\r\n      dispatch({\r\n        USD_in,\r\n        USD_out,\r\n        time: new Date().getTime(),\r\n        type: actionTypeRate.SUCCESS,\r\n      })\r\n    })\r\n    .catch(error => {\r\n      dispatch({\r\n        error,\r\n        type: actionTypeRate.ERROR,\r\n      })\r\n    })\r\n}\r\n\r\nexport default getExchangeRate\r\n","export enum Currency {\r\n  BYN = 'BYN',\r\n  USD = 'USD',\r\n}\r\n\r\nexport interface CurrencyState {\r\n  mainCurrency: Currency\r\n}\r\n","import React, { FC, Fragment, useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { ThunkDispatch } from 'redux-thunk'\r\nimport styled, { createGlobalStyle } from 'styled-components'\r\nimport { actionCurrency } from './actions/enum'\r\nimport getExchangeRate from './actions/getExchangeRate'\r\nimport setBYN from './actions/setBYN'\r\nimport setUSD from './actions/setUSD'\r\nimport arrow from './arrow.png'\r\nimport currency from './currency.jpg'\r\nimport { AppState } from './reducers'\r\nimport { Currency } from './reducers/interfaces'\r\n\r\ninterface AppType {\r\n  USD_in: string\r\n  USD_out: string\r\n  loading: boolean\r\n  time: string\r\n  error: string\r\n  exchangeRate: () => (dispatch: ThunkDispatch<{}, {}, any>) => void\r\n  mainCurrency: Currency\r\n  setMainBYN: () => { type: actionCurrency }\r\n  setMainUSD: () => { type: actionCurrency }\r\n}\r\n\r\nenum Placeholder {\r\n  BUY = 'Покупка у банка',\r\n  SELL = 'Продажа банку',\r\n}\r\n\r\nenum Field {\r\n  BUY = 'buy',\r\n  SELL = 'sell',\r\n}\r\n\r\nconst MS_IN_3_HOURS = 3 * 60 * 60 * 100\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height:100%;\r\n  }\r\n  body {    \r\n    display: flex; \r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n  }\r\n  #root {\r\n    border: 2px solid black;\r\n    width: 400px;\r\n    height: 400px;\r\n    padding: 20px;\r\n  }\r\n`\r\nconst Arrow = styled.button`\r\n  background-color: transparent;\r\n  border: solid 0px transparent;\r\n  border-radius: 50%;\r\n  padding: 1px;\r\n  display: block;\r\n  margin-top: 70px;\r\n  width: 50px;\r\n  height: 50px;\r\n  cursor: default;\r\n  outline: none;\r\n  &::-moz-focus-inner {\r\n    border: 0;\r\n  }\r\n  &:focus {\r\n    box-shadow: 0 0 3pt 2px #808080;\r\n  }\r\n  &:active {\r\n    transform: scale(1.1, 1.1);\r\n  }\r\n`\r\nconst Button = styled.div`\r\n  background-color: #4caf50;\r\n  border: solid 2px #4caf50;\r\n  border-radius: 10px;\r\n  color: #ffffff;\r\n  font-size: 12px;\r\n  font-weight: 700;\r\n  width: 23px;\r\n  margin-right: 30px;\r\n  padding: 5px 16px;\r\n  display: block;\r\n  cursor: default;\r\n`\r\nconst Input = styled.input`\r\n  margin: 10px;\r\n  padding-right: 10px;\r\n  width: 200px;\r\n  height: 35px;\r\n  font-size: 14px;\r\n  border: 2px solid #cccccc;\r\n  border-radius: 10px;\r\n  background-color: #ffffff;\r\n  text-align: right;\r\n  outline: none;\r\n  &::-moz-focus-inner {\r\n    border: 0;\r\n  }\r\n  &:hover,\r\n  &:focus {\r\n    border: 2px solid #808080;\r\n  }\r\n`\r\nconst Img = styled.img`\r\n  display: block;\r\n  width: 50px;\r\n  height: 50px;\r\n  margin: 0;\r\n  padding: 0;\r\n  pointer-events: none;\r\n`\r\nconst Title = styled.h3`\r\n  display: inline-block;\r\n  margin: 10px;\r\n`\r\nconst WrapperUP = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\nconst WrapperDown = styled.div`\r\n  display: flex;\r\n  margin-top: 20px;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  &:nth-child(3) {\r\n    flex-basis: 100%;\r\n  }\r\n`\r\nconst Warning = styled.h3`\r\n  color: #ff0000;\r\n  text-align: center;\r\n`\r\n\r\nconst App: FC<AppType> = ({\r\n  USD_in,\r\n  USD_out,\r\n  loading,\r\n  error,\r\n  time,\r\n  exchangeRate,\r\n  mainCurrency,\r\n  setMainBYN,\r\n  setMainUSD,\r\n}) => {\r\n  const [sellInput, setSellInput] = useState('')\r\n  const [buyInput, setBuyInput] = useState('')\r\n\r\n  useEffect(() => {\r\n    exchangeRate()\r\n  }, [exchangeRate])\r\n\r\n  const getNewExchangeRate = () => {\r\n    if (new Date().getTime() - parseFloat(time) > MS_IN_3_HOURS) {\r\n      exchangeRate()\r\n    }\r\n    return\r\n  }\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    let result\r\n    const { value, name } = event.target\r\n    getNewExchangeRate()\r\n    if (!value.length || !USD_in || !USD_out) {\r\n      setSellInput('')\r\n      setBuyInput('')\r\n      return\r\n    }\r\n    if (!/^\\d+[.]?\\d{0,4}$|^$/g.test(value)) {\r\n      return\r\n    }\r\n    if (value.length > 16) {\r\n      return\r\n    }\r\n    if (name === Field.SELL) {\r\n      if (/^0\\d$/.test(value)) {\r\n        setSellInput(value[1])\r\n        result =\r\n          mainCurrency === Currency.USD\r\n            ? parseFloat(USD_in) * parseFloat(value[1])\r\n            : parseFloat(value[1]) / parseFloat(USD_out)\r\n        setBuyInput((Math.round(result * 10000) / 10000).toString())\r\n        return\r\n      }\r\n      setSellInput(value)\r\n      result =\r\n        mainCurrency === Currency.USD\r\n          ? parseFloat(USD_in) * parseFloat(value)\r\n          : parseFloat(value) / parseFloat(USD_out)\r\n      setBuyInput((Math.round(result * 10000) / 10000).toString())\r\n      return\r\n    }\r\n    if (name === Field.BUY) {\r\n      if (/^0\\d$/.test(value)) {\r\n        setBuyInput(value[1])\r\n        result =\r\n          mainCurrency === Currency.BYN\r\n            ? parseFloat(value[1]) * parseFloat(USD_out)\r\n            : parseFloat(value[1]) / parseFloat(USD_in)\r\n        setSellInput((Math.round(result * 10000) / 10000).toString())\r\n        return\r\n      }\r\n      setBuyInput(value)\r\n      result =\r\n        mainCurrency === Currency.BYN\r\n          ? parseFloat(value) * parseFloat(USD_out)\r\n          : parseFloat(value) / parseFloat(USD_in)\r\n      setSellInput((Math.round(result * 10000) / 10000).toString())\r\n      return\r\n    }\r\n  }\r\n\r\n  const handleClick = (\r\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ): void => {\r\n    let result\r\n    getNewExchangeRate()\r\n    if (mainCurrency === Currency.USD) {\r\n      setMainBYN()\r\n      if (!sellInput) {\r\n        return\r\n      }\r\n      result = parseFloat(sellInput) / parseFloat(USD_out)\r\n      setBuyInput((Math.round(result * 10000) / 10000).toString())\r\n      return\r\n    }\r\n    setMainUSD()\r\n    if (!sellInput) {\r\n      return\r\n    }\r\n    result = parseFloat(USD_in) * parseFloat(sellInput)\r\n    setBuyInput((Math.round(result * 10000) / 10000).toString())\r\n    return\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <GlobalStyle />\r\n      <WrapperUP>\r\n        <Img src={currency} />\r\n        <Title>Конвертер валют</Title>\r\n      </WrapperUP>\r\n      <WrapperDown>\r\n        <Input\r\n          name={Field.SELL}\r\n          placeholder={Placeholder.SELL}\r\n          value={sellInput}\r\n          onChange={handleChange}\r\n          disabled={loading || error.length === 0}\r\n        />\r\n        <Button>{mainCurrency}</Button>\r\n        <Arrow onClick={handleClick}>\r\n          <Img src={arrow} />\r\n        </Arrow>\r\n        <Input\r\n          name={Field.BUY}\r\n          value={buyInput}\r\n          placeholder={Placeholder.BUY}\r\n          onChange={handleChange}\r\n          disabled={loading || error.length === 0}\r\n        />\r\n        <Button>\r\n          {mainCurrency === Currency.USD ? Currency.BYN : Currency.USD}\r\n        </Button>\r\n      </WrapperDown>\r\n      {error.length !== 0 && USD_out.length !== 0 && USD_in.length !== 0 && (\r\n        <Warning>Данные устарели</Warning>\r\n      )}\r\n      {error.length !== 0 && (USD_out.length === 0 || USD_in.length === 0) && (\r\n        <Warning>Конвертер временно не работает</Warning>\r\n      )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  USD_in: state.rate.USD_in,\r\n  USD_out: state.rate.USD_out,\r\n  error: state.rate.error,\r\n  loading: state.rate.loading,\r\n  mainCurrency: state.currency.mainCurrency,\r\n  time: state.rate.time,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>) => ({\r\n  exchangeRate: () => dispatch(getExchangeRate()),\r\n  setMainBYN: () => dispatch(setBYN()),\r\n  setMainUSD: () => dispatch(setUSD()),\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App)\r\n","import { actionCurrency } from './enum'\r\n\r\nexport default function setBYN() {\r\n  return {\r\n    type: actionCurrency.BYN,\r\n  }\r\n}\r\n","import { actionCurrency } from './enum'\r\n\r\nexport default function setUSD() {\r\n  return {\r\n    type: actionCurrency.USD,\r\n  }\r\n}\r\n","import { actionCurrency } from '../actions/enum'\r\nimport { Currency, CurrencyState } from './interfaces'\r\n\r\ninterface Action {\r\n  type: actionCurrency\r\n}\r\n\r\nconst initialState: CurrencyState = {\r\n  mainCurrency: Currency.USD,\r\n}\r\n\r\nexport const currencyReducer = (state = initialState, action: Action) => {\r\n  switch (action.type) {\r\n    case actionCurrency.USD:\r\n      return { ...state, mainCurrency: Currency.USD }\r\n\r\n    case actionCurrency.BYN:\r\n      return { ...state, mainCurrency: Currency.BYN }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { actionTypeRate } from '../actions/enum'\r\n\r\ninterface ActionRate {\r\n  type: actionTypeRate\r\n  USD_in: string\r\n  USD_out: string\r\n  time: string\r\n  error: string\r\n}\r\n\r\nconst initialState = {\r\n  USD_in: '',\r\n  USD_out: '',\r\n  error: '',\r\n  loading: true,\r\n  time: '',\r\n}\r\n\r\nexport const rateReducer = (state = initialState, action: ActionRate) => {\r\n  switch (action.type) {\r\n    case actionTypeRate.LOADING:\r\n      return {\r\n        ...state,\r\n        error: '',\r\n        loading: true,\r\n      }\r\n\r\n    case actionTypeRate.SUCCESS:\r\n      return {\r\n        ...state,\r\n        USD_in: action.USD_in,\r\n        USD_out: action.USD_out,\r\n        loading: false,\r\n        time: action.time,\r\n      }\r\n\r\n    case actionTypeRate.ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n        loading: false,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { currencyReducer } from './currency'\r\nimport { rateReducer } from './rate'\r\n\r\nexport const rootReducer = combineReducers({\r\n  currency: currencyReducer,\r\n  rate: rateReducer,\r\n})\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>\r\n","import { applyMiddleware, createStore } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport { rootReducer } from '../reducers'\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport { store }\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport App from './App'\r\nimport { store } from './store'\r\n\r\nconst MyAppWithStore = () => (\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n)\r\n\r\nReactDOM.render(<MyAppWithStore />, document.querySelector('#root'))\r\n"],"sourceRoot":""}