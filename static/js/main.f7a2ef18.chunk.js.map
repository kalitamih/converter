{"version":3,"sources":["arrow.png","currency.jpg","actions/enum.tsx","actions/getExchangeRate.ts","reducers/interfaces.tsx","App.tsx","actions/setBYN.tsx","actions/setUSD.tsx","reducers/currency.tsx","reducers/rate.ts","reducers/index.tsx","store/index.tsx","index.tsx"],"names":["module","exports","actionCurrency","actionTypeRate","getExchangeRate","dispatch","type","LOADING","fetch","then","data","json","USD_in","USD_out","time","Date","getTime","SUCCESS","catch","error","ERROR","Currency","Placeholder","Field","GlobalStyle","createGlobalStyle","Arrow","styled","button","Button","div","Input","input","Img","img","Title","h4","WrapperUP","WrapperDown","Warning","h3","connect","state","rate","loading","mainCurrency","currency","exchangeRate","setMainBYN","BYN","setMainUSD","USD","useState","sellInput","setSellInput","buyInput","setBuyInput","useEffect","getNewExchangeRate","parseFloat","handleChange","event","result","target","value","name","length","test","SELL","Math","round","toString","BUY","src","placeholder","onChange","disabled","onClick","arrow","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,+ECC/BC,EAKAC,E,uEALAD,K,cAAAA,E,eAAAA,M,cAKAC,K,2BAAAA,E,4BAAAA,E,yBAAAA,M,KCHZ,IAyBeC,EAtBS,kBAAM,SAACC,GAC7BA,EAAS,CAAEC,KAAMH,EAAeI,UAChCC,MAAM,GAAD,OALmB,wCAKnB,OAJW,4CAKbC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAC,GAAI,OAAIA,EAAK,KAClBD,KAAK,SAAAC,GAAS,IACLE,EAAoBF,EAApBE,OAAQC,EAAYH,EAAZG,QAChBR,EAAS,CACPO,SACAC,UACAC,MAAM,IAAIC,MAAOC,UACjBV,KAAMH,EAAec,YAGxBC,MAAM,SAAAC,GACLd,EAAS,CACPc,QACAb,KAAMH,EAAeiB,Y,ICvBjBC,ECyBPC,EAKAC,E,y2ED9BOF,K,UAAAA,E,WAAAA,M,cCyBPC,K,uFAAAA,E,kFAAAA,M,cAKAC,K,UAAAA,E,aAAAA,M,KAKL,IAEMC,EAAcC,YAAH,KAkBXC,EAAQC,IAAOC,OAAV,KAyBLC,EAASF,IAAOG,IAAV,KAaNC,EAAQJ,IAAOK,MAAV,KAwBLC,EAAMN,IAAOO,IAAV,KAMHC,EAAQR,IAAOS,GAAV,KAILC,EAAYV,IAAOG,IAAV,KAITQ,EAAcX,IAAOG,IAAV,KASXS,EAAUZ,IAAOa,GAAV,KAiKEC,cAfS,SAACC,GAAD,MAAsB,CAC5C9B,OAAQ8B,EAAMC,KAAK/B,OACnBC,QAAS6B,EAAMC,KAAK9B,QACpBM,MAAOuB,EAAMC,KAAKxB,MAClByB,QAASF,EAAMC,KAAKC,QACpBC,aAAcH,EAAMI,SAASD,aAC7B/B,KAAM4B,EAAMC,KAAK7B,OAGQ,SAACT,GAAD,MAA2C,CACpE0C,aAAc,kBAAM1C,EAASD,MAC7B4C,WAAY,kBAAM3C,ECtSX,CACLC,KAAMJ,EAAe+C,ODsSvBC,WAAY,kBAAM7C,EEvSX,CACLC,KAAMJ,EAAeiD,SFySVV,CA5JU,SAAC,GAUnB,IATL7B,EASI,EATJA,OACAC,EAQI,EARJA,QACA+B,EAOI,EAPJA,QACAzB,EAMI,EANJA,MACAL,EAKI,EALJA,KACAiC,EAII,EAJJA,aACAF,EAGI,EAHJA,aACAG,EAEI,EAFJA,WACAE,EACI,EADJA,WACI,EAC8BE,mBAAS,IADvC,mBACGC,EADH,KACcC,EADd,OAE4BF,mBAAS,IAFrC,mBAEGG,EAFH,KAEaC,EAFb,KAIJC,oBAAU,WACRV,KACC,CAACA,IAEJ,IAAMW,EAAqB,YACrB,IAAI3C,MAAOC,UAAY2C,WAAW7C,GAjIpB,OAkIhBiC,KAKEa,EAAe,SAACC,GACpB,IAAIC,EADqE,EAEjDD,EAAME,OAAtBC,EAFiE,EAEjEA,MAAOC,EAF0D,EAE1DA,KAEf,OADAP,IACKM,EAAME,QAAWtD,GAAWC,GAK5B,uBAAuBsD,KAAKH,IAG7BA,EAAME,OAAS,QAHnB,EAMID,IAAS1C,EAAM6C,KACb,QAAQD,KAAKH,IACfV,EAAaU,EAAM,IACnBF,EACEjB,IAAiBxB,EAAS8B,IACtBQ,WAAW/C,GAAU+C,WAAWK,EAAM,IACtCL,WAAWK,EAAM,IAAML,WAAW9C,QACxC2C,GAAaa,KAAKC,MAAe,IAATR,GAAkB,KAAOS,cAGnDjB,EAAaU,GACbF,EACEjB,IAAiBxB,EAAS8B,IACtBQ,WAAW/C,GAAU+C,WAAWK,GAChCL,WAAWK,GAASL,WAAW9C,QACrC2C,GAAaa,KAAKC,MAAe,IAATR,GAAkB,KAAOS,aAG/CN,IAAS1C,EAAMiD,IACb,QAAQL,KAAKH,IACfR,EAAYQ,EAAM,IAClBF,EACEjB,IAAiBxB,EAAS4B,IACtBU,WAAWK,EAAM,IAAML,WAAW9C,GAClC8C,WAAWK,EAAM,IAAML,WAAW/C,QACxC0C,GAAce,KAAKC,MAAe,IAATR,GAAkB,KAAOS,cAGpDf,EAAYQ,GACZF,EACEjB,IAAiBxB,EAAS4B,IACtBU,WAAWK,GAASL,WAAW9C,GAC/B8C,WAAWK,GAASL,WAAW/C,QACrC0C,GAAce,KAAKC,MAAe,IAATR,GAAkB,KAAOS,kBAfpD,GA5BEjB,EAAa,SACbE,EAAY,MAsEhB,OACE,kBAAC,WAAD,KACE,kBAAChC,EAAD,MACA,kBAACa,EAAD,KACE,kBAACJ,EAAD,CAAKwC,IAAK3B,MACV,kBAACX,EAAD,+FAEF,kBAACG,EAAD,KACE,kBAACP,EAAD,CACEkC,KAAM1C,EAAM6C,KACZM,YAAapD,EAAY8C,KACzBJ,MAAOX,EACPsB,SAAUf,EACVgB,SAAUhC,GAA4B,IAAjBzB,EAAM+C,SAE7B,kBAACrC,EAAD,KAASgB,GACT,kBAACnB,EAAD,CAAOmD,QAvCO,SAClBhB,GAEA,IAAIC,EAEJ,GADAJ,IACIb,IAAiBxB,EAAS8B,IAAK,CAEjC,GADAH,KACKK,EACH,OAIF,OAFAS,EAASH,WAAWN,GAAaM,WAAW9C,QAC5C2C,GAAaa,KAAKC,MAAe,IAATR,GAAkB,KAAOS,YAGnDrB,IACKG,IAGLS,EAASH,WAAW/C,GAAU+C,WAAWN,GACzCG,GAAaa,KAAKC,MAAe,IAATR,GAAkB,KAAOS,eAqB3C,kBAACtC,EAAD,CAAKwC,IAAKK,OAEZ,kBAAC/C,EAAD,CACEkC,KAAM1C,EAAMiD,IACZR,MAAOT,EACPmB,YAAapD,EAAYkD,IACzBG,SAAUf,EACVgB,SAAUhC,GAA4B,IAAjBzB,EAAM+C,SAE7B,kBAACrC,EAAD,KACGgB,IAAiBxB,EAAS8B,IAAM9B,EAAS4B,IAAM5B,EAAS8B,MAG3C,IAAjBhC,EAAM+C,QAAmC,IAAnBrD,EAAQqD,QAAkC,IAAlBtD,EAAOsD,QACpD,kBAAC3B,EAAD,8FAEgB,IAAjBpB,EAAM+C,SAAoC,IAAnBrD,EAAQqD,QAAkC,IAAlBtD,EAAOsD,SACrD,kBAAC3B,EAAD,iL,ykBGjRR,IAAMwC,EAA8B,CAClClC,aAAcxB,EAAS8B,K,mjBCEzB,IAAM4B,EAAe,CACnBnE,OAAQ,GACRC,QAAS,GACTM,MAAO,GACPyB,SAAS,EACT9B,KAAM,ICXKkE,EAAcC,YAAgB,CACzCnC,SFM6B,WAA2C,IAA1CJ,EAAyC,uDAAjCqC,EAAcG,EAAmB,uCACvE,OAAQA,EAAO5E,MACb,KAAKJ,EAAeiD,IAClB,OAAO,EAAP,GAAYT,EAAZ,CAAmBG,aAAcxB,EAAS8B,MAE5C,KAAKjD,EAAe+C,IAClB,OAAO,EAAP,GAAYP,EAAZ,CAAmBG,aAAcxB,EAAS4B,MAE5C,QACE,OAAOP,IEdXC,KDYyB,WAA+C,IAA9CD,EAA6C,uDAArCqC,EAAcG,EAAuB,uCACvE,OAAQA,EAAO5E,MACb,KAAKH,EAAeI,QAClB,OAAO,KACFmC,EADL,CAEEvB,MAAO,GACPyB,SAAS,IAGb,KAAKzC,EAAec,QAClB,OAAO,KACFyB,EADL,CAEE9B,OAAQsE,EAAOtE,OACfC,QAASqE,EAAOrE,QAChB+B,SAAS,EACT9B,KAAMoE,EAAOpE,OAGjB,KAAKX,EAAeiB,MAClB,OAAO,KACFsB,EADL,CAEEvB,MAAO+D,EAAO/D,MACdyB,SAAS,IAGb,QACE,OAAOF,MEvCPyC,EAAQC,YAAYJ,EAAaK,YAAgBC,MCOvDC,IAASC,OAAO,kBANO,kBACrB,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAIY,MAAoBM,SAASC,cAAc,Y","file":"static/js/main.f7a2ef18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.d20ee171.png\";","module.exports = __webpack_public_path__ + \"static/media/currency.4d066587.jpg\";","// @ts-ignore\nexport enum actionCurrency {\n  BYN = 'SET_BYN',\n  USD = 'SET_USD',\n}\n\nexport enum actionTypeRate {\n  LOADING = 'GET_RATE_LOADING',\n  SUCCESS = 'LOAD_RATE_SUCCESS',\n  ERROR = 'LOAD_RATE_ERROR',\n}\n","import { ThunkDispatch } from 'redux-thunk'\nimport { actionTypeRate } from './enum'\n\nconst LINK_HEROKU_PROXY = 'https://cors-anywhere.herokuapp.com/'\nconst LINK_BANK = 'https://belarusbank.by/api/kursExchange'\n\nconst getExchangeRate = () => (dispatch: ThunkDispatch<{}, {}, any>) => {\n  dispatch({ type: actionTypeRate.LOADING })\n  fetch(`${LINK_HEROKU_PROXY}${LINK_BANK}`)\n    .then(data => data.json())\n    .then(data => data[0])\n    .then(data => {\n      const { USD_in, USD_out } = data\n      dispatch({\n        USD_in,\n        USD_out,\n        time: new Date().getTime(),\n        type: actionTypeRate.SUCCESS,\n      })\n    })\n    .catch(error => {\n      dispatch({\n        error,\n        type: actionTypeRate.ERROR,\n      })\n    })\n}\n\nexport default getExchangeRate\n","export enum Currency {\n  BYN = 'BYN',\n  USD = 'USD',\n}\n\nexport interface CurrencyState {\n  mainCurrency: Currency\n}\n","import React, { FC, Fragment, useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport styled, { createGlobalStyle } from 'styled-components'\nimport { actionCurrency } from './actions/enum'\nimport getExchangeRate from './actions/getExchangeRate'\nimport setBYN from './actions/setBYN'\nimport setUSD from './actions/setUSD'\nimport arrow from './arrow.png'\nimport currency from './currency.jpg'\nimport { AppState } from './reducers'\nimport { Currency } from './reducers/interfaces'\n\ninterface AppType {\n  USD_in: string\n  USD_out: string\n  loading: boolean\n  time: string\n  error: string\n  exchangeRate: () => (dispatch: ThunkDispatch<{}, {}, any>) => void\n  mainCurrency: Currency\n  setMainBYN: () => { type: actionCurrency }\n  setMainUSD: () => { type: actionCurrency }\n}\n\nenum Placeholder {\n  BUY = 'Покупка у банка',\n  SELL = 'Продажа банку',\n}\n\nenum Field {\n  BUY = 'buy',\n  SELL = 'sell',\n}\n\nconst MS_IN_3_HOURS = 3 * 60 * 60 * 100\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    height:100%;\n  }\n  body {    \n    display: flex; \n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n  }\n  #root {\n    border: 2px solid black;\n    width: 270px;\n    height: 270px;\n    padding: 15px;\n  }\n`\nconst Arrow = styled.button`\n  background-color: transparent;\n  border: solid 0px transparent;\n  border-radius: 50%;\n  padding: 1px;\n  display: block;\n  margin-top: 70px;\n  width: 35px;\n  height: 35px;\n  cursor: default;\n  outline: none;\n  &::-moz-focus-inner {\n    border: 0;\n  }\n  &:focus {\n    box-shadow: 0 0 3pt 2px #808080;\n  }\n  &:active {\n    transform: scale(1.1, 1.1);\n  }\n  @media (max-width: 240px) {\n    position: absolute;\n    left: 45%;\n  }\n`\nconst Button = styled.div`\n  background-color: #4caf50;\n  border: solid 2px #4caf50;\n  border-radius: 10px;\n  color: #ffffff;\n  font-size: 10px;\n  font-weight: 700;\n  width: 22px;\n  margin-right: 10px;\n  padding: 5px 8px;\n  display: block;\n  cursor: default;\n`\nconst Input = styled.input`\n  margin: 10px;\n  padding-right: 10px;\n  width: 140px;\n  height: 30px;\n  font-size: 12px;\n  border: 2px solid #cccccc;\n  border-radius: 10px;\n  background-color: #ffffff;\n  text-align: right;\n  outline: none;\n  &::-moz-focus-inner {\n    border: 0;\n  }\n  &:hover,\n  &:focus {\n    border: 2px solid #808080;\n  }\n  @media (max-width: 240px) {\n    width: 100px;\n    height: 25px;\n    font-size: 10px;\n  }\n`\nconst Img = styled.img`\n  display: block;\n  width: 34px;\n  height: 34px;\n  pointer-events: none;\n`\nconst Title = styled.h4`\n  display: inline-block;\n  margin: 10px;\n`\nconst WrapperUP = styled.div`\n  display: flex;\n  align-items: center;\n`\nconst WrapperDown = styled.div`\n  display: flex;\n  margin-top: 20px;\n  flex-wrap: wrap;\n  align-items: center;\n  &:nth-child(3) {\n    flex-basis: 100%;\n  }\n`\nconst Warning = styled.h3`\n  color: #ff0000;\n  text-align: center;\n`\n\nconst App: FC<AppType> = ({\n  USD_in,\n  USD_out,\n  loading,\n  error,\n  time,\n  exchangeRate,\n  mainCurrency,\n  setMainBYN,\n  setMainUSD,\n}) => {\n  const [sellInput, setSellInput] = useState('')\n  const [buyInput, setBuyInput] = useState('')\n\n  useEffect(() => {\n    exchangeRate()\n  }, [exchangeRate])\n\n  const getNewExchangeRate = () => {\n    if (new Date().getTime() - parseFloat(time) > MS_IN_3_HOURS) {\n      exchangeRate()\n    }\n    return\n  }\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    let result\n    const { value, name } = event.target\n    getNewExchangeRate()\n    if (!value.length || !USD_in || !USD_out) {\n      setSellInput('')\n      setBuyInput('')\n      return\n    }\n    if (!/^\\d+[.]?\\d{0,4}$|^$/g.test(value)) {\n      return\n    }\n    if (value.length > 16) {\n      return\n    }\n    if (name === Field.SELL) {\n      if (/^0\\d$/.test(value)) {\n        setSellInput(value[1])\n        result =\n          mainCurrency === Currency.USD\n            ? parseFloat(USD_in) * parseFloat(value[1])\n            : parseFloat(value[1]) / parseFloat(USD_out)\n        setBuyInput((Math.round(result * 10000) / 10000).toString())\n        return\n      }\n      setSellInput(value)\n      result =\n        mainCurrency === Currency.USD\n          ? parseFloat(USD_in) * parseFloat(value)\n          : parseFloat(value) / parseFloat(USD_out)\n      setBuyInput((Math.round(result * 10000) / 10000).toString())\n      return\n    }\n    if (name === Field.BUY) {\n      if (/^0\\d$/.test(value)) {\n        setBuyInput(value[1])\n        result =\n          mainCurrency === Currency.BYN\n            ? parseFloat(value[1]) * parseFloat(USD_out)\n            : parseFloat(value[1]) / parseFloat(USD_in)\n        setSellInput((Math.round(result * 10000) / 10000).toString())\n        return\n      }\n      setBuyInput(value)\n      result =\n        mainCurrency === Currency.BYN\n          ? parseFloat(value) * parseFloat(USD_out)\n          : parseFloat(value) / parseFloat(USD_in)\n      setSellInput((Math.round(result * 10000) / 10000).toString())\n      return\n    }\n  }\n\n  const handleClick = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ): void => {\n    let result\n    getNewExchangeRate()\n    if (mainCurrency === Currency.USD) {\n      setMainBYN()\n      if (!sellInput) {\n        return\n      }\n      result = parseFloat(sellInput) / parseFloat(USD_out)\n      setBuyInput((Math.round(result * 10000) / 10000).toString())\n      return\n    }\n    setMainUSD()\n    if (!sellInput) {\n      return\n    }\n    result = parseFloat(USD_in) * parseFloat(sellInput)\n    setBuyInput((Math.round(result * 10000) / 10000).toString())\n    return\n  }\n\n  return (\n    <Fragment>\n      <GlobalStyle />\n      <WrapperUP>\n        <Img src={currency} />\n        <Title>Конвертер валют</Title>\n      </WrapperUP>\n      <WrapperDown>\n        <Input\n          name={Field.SELL}\n          placeholder={Placeholder.SELL}\n          value={sellInput}\n          onChange={handleChange}\n          disabled={loading || error.length !== 0}\n        />\n        <Button>{mainCurrency}</Button>\n        <Arrow onClick={handleClick}>\n          <Img src={arrow} />\n        </Arrow>\n        <Input\n          name={Field.BUY}\n          value={buyInput}\n          placeholder={Placeholder.BUY}\n          onChange={handleChange}\n          disabled={loading || error.length !== 0}\n        />\n        <Button>\n          {mainCurrency === Currency.USD ? Currency.BYN : Currency.USD}\n        </Button>\n      </WrapperDown>\n      {error.length !== 0 && USD_out.length !== 0 && USD_in.length !== 0 && (\n        <Warning>Данные устарели</Warning>\n      )}\n      {error.length !== 0 && (USD_out.length === 0 || USD_in.length === 0) && (\n        <Warning>Конвертер временно не работает</Warning>\n      )}\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  USD_in: state.rate.USD_in,\n  USD_out: state.rate.USD_out,\n  error: state.rate.error,\n  loading: state.rate.loading,\n  mainCurrency: state.currency.mainCurrency,\n  time: state.rate.time,\n})\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>) => ({\n  exchangeRate: () => dispatch(getExchangeRate()),\n  setMainBYN: () => dispatch(setBYN()),\n  setMainUSD: () => dispatch(setUSD()),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n","import { actionCurrency } from './enum'\n\nexport default function setBYN() {\n  return {\n    type: actionCurrency.BYN,\n  }\n}\n","import { actionCurrency } from './enum'\n\nexport default function setUSD() {\n  return {\n    type: actionCurrency.USD,\n  }\n}\n","import { actionCurrency } from '../actions/enum'\nimport { Currency, CurrencyState } from './interfaces'\n\ninterface Action {\n  type: actionCurrency\n}\n\nconst initialState: CurrencyState = {\n  mainCurrency: Currency.USD,\n}\n\nexport const currencyReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case actionCurrency.USD:\n      return { ...state, mainCurrency: Currency.USD }\n\n    case actionCurrency.BYN:\n      return { ...state, mainCurrency: Currency.BYN }\n\n    default:\n      return state\n  }\n}\n","import { actionTypeRate } from '../actions/enum'\n\ninterface ActionRate {\n  type: actionTypeRate\n  USD_in: string\n  USD_out: string\n  time: string\n  error: string\n}\n\nconst initialState = {\n  USD_in: '',\n  USD_out: '',\n  error: '',\n  loading: true,\n  time: '',\n}\n\nexport const rateReducer = (state = initialState, action: ActionRate) => {\n  switch (action.type) {\n    case actionTypeRate.LOADING:\n      return {\n        ...state,\n        error: '',\n        loading: true,\n      }\n\n    case actionTypeRate.SUCCESS:\n      return {\n        ...state,\n        USD_in: action.USD_in,\n        USD_out: action.USD_out,\n        loading: false,\n        time: action.time,\n      }\n\n    case actionTypeRate.ERROR:\n      return {\n        ...state,\n        error: action.error,\n        loading: false,\n      }\n\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { currencyReducer } from './currency'\nimport { rateReducer } from './rate'\n\nexport const rootReducer = combineReducers({\n  currency: currencyReducer,\n  rate: rateReducer,\n})\n\nexport type AppState = ReturnType<typeof rootReducer>\n","import { applyMiddleware, createStore } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport { rootReducer } from '../reducers'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport { store }\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport { store } from './store'\n\nconst MyAppWithStore = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(<MyAppWithStore />, document.querySelector('#root'))\n"],"sourceRoot":""}